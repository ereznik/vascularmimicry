d3 = d2[-which(duplicated(d2)),]
dim(d3)
d3
colnames(d)
d2 = d[,c(2,3,9,10)]
d3 = d2[-which(duplicated(d2)),]
head(d3)
head(d3,10)
tail(d3,10)
d4 = d3[order(d3$EC_number),]
tail(d3)
tail(d4)
tail(d4)
tail(d3,10)
colnames(d)
d2 = d[,c(7,3,2,9,10)]
d3 = d2[-which(duplicated(d2)),]
d4 = d3[order(d3$EC_number),]
tail(d4,20)
d3 = d2[-which(duplicated(d2[,2:3])),]
dim(d3)
tail(d4,20)
d4 = d3[order(d3$EC_number),]
tail(d4,20)
dim(d4)
d4[100:110,]
d[65164,]
d[65165,]
d4[120:140,]
d4[140:150,]
d4[340:360,]
d4[340:360,]
d4[440:460,]
colnames(d)
d2 = d[,c(7,3,2,9,10,12)]
d2 = d[,c(7,3,2,9,12)]
d3 = d2[-which(duplicated(d2[,2:3])),]
d4 = d3[order(d3$EC_number),]
d4[440:460,]
d4[540:560,]
d4[540:560,]
d['66343',]
d['23418',]
d4[610:660,]
d4[710:760,]
d4[810:860,]
d4[810:860,]
d4[910:960,]
d4['65241',]
d['65241',]
binom.test(3,2,0.5)
binom.test(2,3,0.5)
d = read.csv('/Users/ereznik/Downloads/gene_level_binomial_impact (1).txt',header = TRUE,sep = '\t',stringsAsFactors = FALSE)
head(d)
library(ggplot2)
d2 = read.csv('/Users/ereznik/Downloads/gene_level_binomial_impact.txt',header = TRUE,sep = '\t',stringsAsFactors = FALSE)
head(d2)
d2 = read.csv('/Users/ereznik/Downloads/gene_level_binomial_impact.txt',header = TRUE,sep = '\t',stringsAsFactors = FALSE,row.names = 1)
d = read.csv('/Users/ereznik/Downloads/gene_level_binomial_impact (1).txt',header = TRUE,sep = '\t',stringsAsFactors = FALSE,row.names = 1)
qplot(d$q.val,d2[rownames(d),'q.val'])
qplot(d$q.val,d2[rownames(d),'q.val'],label = rownames(d)) + geom_text()
qplot(d$q.val,d2[rownames(d),'q.val'],label = rownames(d)) + geom_text() + ggsave('/Users/ereznik/Downloads/genetest.pdf',height = 8,width = 8)
qplot(log10(d$q.val),log10(d2[rownames(d),'q.val']),label = rownames(d)) + geom_text() + ggsave('/Users/ereznik/Downloads/genetest.pdf',height = 8,width = 8)
qplot(log10(d$q.val),log10(d2[rownames(d),'q.val']),label = rownames(d)) + geom_text() + xlim(0,-10) + ylim(0,-10) + ggsave('/Users/ereznik/Downloads/genetest.pdf',height = 8,width = 8)
d['KMT2A',]
d2['KMT2A',]
d2['ZFHX3',]
d['ZFHX3',]
qplot(log10(d$p.val),log10(d2[rownames(d),'p.val.uncorrected']),label = rownames(d)) + geom_text() + xlim(0,-10) + ylim(0,-10) + ggsave('/Users/ereznik/Downloads/genetest.pdf',height = 8,width = 8)
qplot(log10(d$p.val),log10(d[rownames(d),'p.val.uncorrected']),label = rownames(d)) + geom_text() + xlim(0,-10) + ylim(0,-10) + ggsave('/Users/ereznik/Downloads/genetest.pdf',height = 8,width = 8)
d['SETD2',]
d['TSC2',]
library(XLConnect)
d = readWorksheetFromFile('/Users/ereznik/Downloads/16-199_MetsPattern_24Sept17.xlsx',sheet = 'Mets Sites')
dim(d)
table(d)
table(d$PatientId)
a = order(d$PatientId)
a[order(a)]
a[order(a)]a
a
a = d$PatientId
a[order(a)]
a
a = table(d$PatientId)
a[order(a)]
length(which(a>1))
length(which(a>2))
length(which(a>3))
length(which(a>5))
d[which(d$PatientId == 49727)]
d[which(d$PatientId == 49727),]
d[which(d$PatientId == 28863),]
d[which(d$PatientId == 12201),]
d[which(d$PatientId == 13494),]
length(unique(d$PatientId))
a
length(a)
length(a>1)
length(which(a>1)
)
length(which(a>2))
length(which(a>3))
d2 = readWorksheetFromFile('/Users/ereznik/Downloads/16-199_MetsPattern_24Sept17.xlsx',sheet = 'Main')
table(d2$PathHistology)
length(which(a>1))
length(which(a>2))
length(which(a>3))
res = data.frame()
res[1,'Tumor'] = 'Run5_SI-GA-D10_Aligned.out.bam'
res[2,'Tumor'] = 'Run4_SI-GA-H11_Aligned.out.bam'
write.table(res,row.names = FALSE,col.names = FALSE,'/Users/ereznik/Downloads/setty_scRNA.txt')
res = data.frame()
res[1,'Tumor'] = 'Run5_SI-GA-D10_Aligned.out.bam'
res[2,'Tumor'] = 'Run4_SI-GA-H11_Aligned.out.bam'
res[1,'Normal'] = ''
res[2,'Normal'] = ''
write.table(res,row.names = FALSE,col.names = FALSE,'/Users/ereznik/Downloads/setty_scRNA.txt')
write.table(res,row.names = FALSE,col.names = FALSE,'/Users/ereznik/Downloads/setty_scRNA.txt',sep = '\t')
source('~/.active-rstudio-document')
library(data.table)
d = fread('/Users/ereznik/Downloads/MergedMAF_KICH.maf',header = TRUE,stringsAsFactors = FALSE,data.table = FALSE,sep = '\t')
d2 = d[which(d$TumorVAF > 0.01),]
write.csv(d2,'/Users/ereznik/Downloads/temp.csv')
system('ls')
string = 'ls -l'
string
system(string)
a = c('a','asdfasdf','werew')
grepl(a,'asdf')
grepl('asdf',a)
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
counts = read.csv('/Users/ereznik/Downloads/raw_counts.csv',header = TRUE,row.names = 1)
head(Counts)
head(counts)
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/temp.csv','/Users/ereznik/Downloads/MouseKegg.gmt')
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/temp.csv','/Users/ereznik/Downloads/MouseKegg.gmt')
version
library(devtools)
install_github("ctlab/fgsea", ref="r-3.2")
counts = read.csv('/Users/ereznik/Downloads/raw_counts.csv',header = TRUE,row.names = 1)
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/temp.csv','/Users/ereznik/Downloads/MouseKegg.gmt')
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/temp.csv','/Users/ereznik/Downloads/MouseKegg.gmt')
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/temp.csv','/Users/ereznik/Downloads/MouseKegg.gmt')
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/temp.csv','/Users/ereznik/Downloads/MouseKegg.gmt')
source('~/Documents/useful/usefulR_diffexpr.R', echo=TRUE)
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/Finley_MinusQ.csv','/Users/ereznik/Downloads/MouseKegg.gmt')
diffexpr(counts,colnames(counts)[1:3],colnames(counts)[4:6],'/Users/ereznik/Downloads/Finley_MinusQ.csv','/Users/ereznik/Downloads/MousePath_Metabolic_gmt.gmt')
dim(counts)
library(Rtsne)
?Rtsne
source('~/Documents/randomprojects/negativeselection/analysis/quick_negativeselection.R', echo=TRUE)
dev.off()
source('~/Documents/randomprojects/negativeselection/analysis/quick_negativeselection.R')
head(mut)
dim(mut)
colSums(mut)
patburden = colSums( mut, na.rm = TRUE )
head(patburden)
ii = 2
pats2test = names(patburden)[which(patburden == ii)]
pats2test
patburden = colSums( mut, na.rm = TRUE )
maxburden = 50
resgene = data.frame(matrix(NA,dim(mut)[1],maxburden))
rownames(resgene) = rownames(mut)
for (ii in 1:50){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
pats2test = names(patburden)[which(patburden == ii)]
resgene[,ii] = rowSums(mut[pats2test])[rownames(resgene)]/length(pats2test)
}
head(resgene)
resgene[,ii] = rowSums(mut[pats2test],na.rm = TRUE)[rownames(resgene)]/length(pats2test)
for (ii in 1:50){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
pats2test = names(patburden)[which(patburden == ii)]
resgene[,ii] = rowSums(mut[pats2test],na.rm = TRUE)[rownames(resgene)]/length(pats2test)
}
head(resgene)
qplot(resgene['KRAS',])
qplot(resgene['KRAS',1:30])
qplot(resgene['KRAS',1:30],1:30)
resgene['KRAS',]
qplot(1:50,as.matrix(resgene['KRAS',]))
qplot(1:50,as.matrix(t(resgene['KRAS',]))
)
patburden = colSums( mut, na.rm = TRUE )
maxburden = 50
resgene = data.frame(matrix(NA,maxburden,dim(mut)[1]))
colnames(resgene) = rownames(mut)
for (ii in 1:50){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
pats2test = names(patburden)[which(patburden == ii)]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[rownames(resgene)]/length(pats2test)
}
rowSums(mut[pats2test],na.rm = TRUE)[rownames(resgene)]/length(pats2test)
head(resgene)
g
ii
pats2test
for (ii in 1:50){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
pats2test = names(patburden)[which(patburden == ii)]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[colnames(resgene)]/length(pats2test)
}
head(resgene)
qplot(1:50,resgene$KRAS)
qplot(1:50,resgene$SDHA)
qplot(1:50,resgene$SDHB)
qplot(1:50,resgene$SDHC)
qplot(1:50,resgene$SDHD)
head(patsums)
head(patburden)
patsums = patsums[order(patsums)]
patburden = patburden[order(patburden)]
head(patburden)
20000/50
ceil(21234/400)
?ceiling
ceiling(21234/400)
nbins = 400
binsize = ceiling(dim(mut)[2]/nbins)
resgene = data.frame(matrix(NA,nbins,dim(mut)[1]))
colnames(resgene) = rownames(mut)
for (ii in 1:nbins){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
startix = (ii-1)*binsize + 1
endix = min(ii*binsize,dim(mut)[2])
pats2test = names(patburden)[startix:endix]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[colnames(resgene)]/length(pats2test)
}
ii
startix
endix
dim(mut)
length(patsburden)
length(patburden)
nbins = 400
binsize = floor(dim(mut)[2]/nbins)
resgene = data.frame(matrix(NA,nbins,dim(mut)[1]))
colnames(resgene) = rownames(mut)
for (ii in 1:nbins){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
startix = (ii-1)*binsize + 1
endix = min(ii*binsize,dim(mut)[2])
pats2test = names(patburden)[startix:endix]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[colnames(resgene)]/length(pats2test)
}
endix
nbins = 401
binsize = ceiling(dim(mut)[2]/nbins)
resgene = data.frame(matrix(NA,nbins-1,dim(mut)[1]))
colnames(resgene) = rownames(mut)
for (ii in 1:nbins){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
startix = (ii-1)*binsize + 1
if (startix > dim(mut)[2]){break}
endix = min(ii*binsize,dim(mut)[2])
pats2test = names(patburden)[startix:endix]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[colnames(resgene)]/length(pats2test)
}
head(resgene)
pats2test
tail(resgene)
qplot(1:396,resgene$KRAS)
resgene$KRAS
dim(resgene)
qplot(1:400,resgene$KRAS)
qplot(1:400,resgene$SDHA)
qplot(1:400,resgene$SDHD)
qplot(1:400,resgene$VHL)
qplot(1:400,resgene$TP53)
qplot(1:400,resgene$SMAD4)
qplot(1:400,resgene$CDK12)
nbins = 51
binsize = ceiling(dim(mut)[2]/nbins)
resgene = data.frame(matrix(NA,nbins-1,dim(mut)[1]))
colnames(resgene) = rownames(mut)
for (ii in 1:nbins){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
startix = (ii-1)*binsize + 1
if (startix > dim(mut)[2]){break}
endix = min(ii*binsize,dim(mut)[2])
pats2test = names(patburden)[startix:endix]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[colnames(resgene)]/length(pats2test)
}
qplot(1:400,resgene$CDK12)
qplot(1:50,resgene$CDK12)
dim(resgene)
qplot(1:dim(resgene)[1],resgene$CDK12)
qplot(1:dim(resgene)[1],resgene$EGFR)
qplot(1:dim(resgene)[1],resgene$SDHA)
qplot(1:dim(resgene)[1],resgene$SDHD)
qplot(1:dim(resgene)[1],resgene$VHL)
qplot(1:dim(resgene)[1],resgene$ESR1)
qplot(1:dim(resgene)[1],resgene$APC)
qplot(1:dim(resgene)[1],resgene$KIT)
qplot(1:dim(resgene)[1],resgene$FOXA1)
qplot(1:dim(resgene)[1],resgene$IDH1)
qplot(1:dim(resgene)[1],resgene$IDH2)
qplot(1:dim(resgene)[1],resgene$FH)
qplot(1:dim(resgene)[1],resgene$NRAS)
qplot(1:dim(resgene)[1],resgene$SDHB)
rescor = apply(as.matrix(resgene),2,function(x){cor.test(1:length(x),x,method = 'spearman')$estimate})
rescor
genep = apply(as.matrix(resgene),2,function(x){-log10(cor.test(1:length(x),x,method = 'spearman')$p.value)})
genep
sort(genep)
qplot(1:dim(resgene)[1],resgene$FAT1)
qplot(1:dim(resgene)[1],resgene$MTOR)
meanburden = c()
for (ii in 1:nbins){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
startix = (ii-1)*binsize + 1
if (startix > dim(mut)[2]){break}
endix = min(ii*binsize,dim(mut)[2])
pats2test = names(patburden)[startix:endix]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[colnames(resgene)]/length(pats2test)
meanburden[ii] = mean(patburden[pats2test])
}
genecor = apply(as.matrix(resgene),2,function(x){cor.test(1:length(x),x,method = 'spearman')$estimate})
genep = apply(as.matrix(resgene),2,function(x){-log10(cor.test(1:length(x),x,method = 'spearman')$p.value)})
qplot(meanburden,resgene$KRAS)
binsize
nbins = 101
binsize = ceiling(dim(mut)[2]/nbins)
resgene = data.frame(matrix(NA,nbins-1,dim(mut)[1]))
colnames(resgene) = rownames(mut)
meanburden = c()
for (ii in 1:nbins){
# For each gene, calculate the proportion of samples with that burden that have a mutation in that gene
startix = (ii-1)*binsize + 1
if (startix > dim(mut)[2]){break}
endix = min(ii*binsize,dim(mut)[2])
pats2test = names(patburden)[startix:endix]
resgene[ii,] = rowSums(mut[pats2test],na.rm = TRUE)[colnames(resgene)]/length(pats2test)
meanburden[ii] = mean(patburden[pats2test])
}
genecor = apply(as.matrix(resgene),2,function(x){cor.test(1:length(x),x,method = 'spearman')$estimate})
genep = apply(as.matrix(resgene),2,function(x){-log10(cor.test(1:length(x),x,method = 'spearman')$p.value)})
qplot(meanburden,resgene$KRAS)
qplot(meanburden,resgene$SDHA)
qplot(meanburden,resgene$SDHB)
qplot(meanburden,resgene$VHL)
1/15
library(glmnet)
?cv.glmnet
?glmnet
library(XLConnect)
d = readWorksheetFromFile('/Users/ereznik/Documents/mtimpact/results/reuter_review/Oncocytic tumors_Reznik_Identified.xlsx')
d = readWorksheetFromFile('/Users/ereznik/Documents/mtimpact/results/reuter_review/Oncocytic tumors_Reznik_Identified.xlsx',sheet = 'SamplesToReview_Mitochondria.cs')
head(d)
dyes = d[which(d$Slides.Available == 'Y'),]
table(d$OncCall,d$Class.1)
table(d$Class.1, d$OncCall)
5/11
2/9
chisq.testtable(d$Class.1, d$OncCall))
chisq.test(table(d$Class.1, d$OncCall))
dyes = d[which(d$Slides.Available == 'Y' & d$Class.1 != NA),]
chisq.test(table(d$Class.1, d$OncCall))
dyes
dyes = d[which(d$Slides.Available == 'Y' & d$Class.1 != NA),]
dyes
dyes = d[which(d$Slides.Available == 'Y'),]
dyes
dyes = d[which(d$Slides.Available == 'Y' & !is.na(d$OncCall)),]
dyes
chisq.test(table(d$Class.1, d$OncCall))
d[1,]
d[1,'OncCall']
dyes = d[which(d$Slides.Available == 'Y' &  d$OncCall != 'NA'),]
dyes
chisq.test(table(d$Class.1, d$OncCall))
table(d$Class.1,d$OncCall)
dyes = d[which(d$Slides.Available == 'Y' &  d$OncCall != 'NA'),]
dyes
table(dyes$Class.1,dyes$OncCall)
chisq.test(table(dyes$Class.1, dyes$OncCall))
d = readWorksheetFromFile('/Users/ereznik/Documents/mtimpact/results/reuter_review/Oncocytic tumors_Reznik_Identified.xlsx')
d = readWorksheetFromFile('/Users/ereznik/Documents/mtimpact/results/reuter_review/Oncocytic tumors_Reznik_Identified.xlsx',sheet = 'SamplesToReview_Mitochondria.cs')
dyes = d[which(d$Slides.Available == 'Y' &  d$OncCall != 'NA'),]
table(dyes$Class.1,dyes$OncCall)
d = readWorksheetFromFile('/Users/ereznik/Documents/mtimpact/results/reuter_review/Oncocytic tumors_Reznik_Identified.xlsx',sheet = 'SamplesToReview_Mitochondria.cs')
dyes = d[which(d$Slides.Available == 'Y' &  d$OncCall != 'NA'),]
table(dyes$Class.1,dyes$OncCall)
d = readWorksheetFromFile('/Users/ereznik/Documents/mtimpact/results/reuter_review/Oncocytic tumors_Reznik_Identified.xlsx',sheet = 'SamplesToReview_Mitochondria.cs')
dyes = d[which(d$Slides.Available == 'Y' &  d$OncCall != 'NA'),]
table(dyes$Class.1,dyes$OncCall)
chisq.test(table(dyes$Class.1, dyes$OncCall))
fisher.test(table(dyes$Class.1, dyes$OncCall))
log(2)
log(1/2)
log2(2)
log10(2)
90/6000
9.2/.015
9.2*.015
1/.138
1/.015
d = read.csv('/Users/ereznik/Downloads/gene_phase_coding_summary.tsv',header = TRUE,row.names = 1,stringsAsFactors = FALSE,sep = '\t')
head(d)
hist(d$cis.silent/(d$trans..in.same.cell..silent + d$trans.of.in.different.cells.silent))
d$silentratio = d$cis.silent/(d$trans..in.same.cell..silent + d$trans.of.in.different.cells.silent)
hist(log2(d$silentratio))
hist(log2(d$silentratio),30)
d$codingratio = d$cis.coding/(d$trans..in.same.cell..coding + d$trans.of.in.different.cells.coding)
hist(log2(d$codingratio))
library(cowplot)
p1 = ggplot(d,aes(silentratio)) + geom_hist()
p1 = ggplot(d,aes(silentratio)) + geom_histogram()
p1
p1 = ggplot(d,aes(log2(silentratio))) + geom_histogram()
p1
p2 = ggplot(d,aes(log2(codingratio))) + geom_histogram()
p2
pall = plot_grid(p1,p2,ncol = 1)
pall
hist(log2(d$codingratio))
cowplot::save_plot('/Users/ereznik/Downloads/temp.pdf',pall)
install.packages('deconstructSigs')
library(deconstructSigs)
deconstructSigs::updateW_GR()
?deconstructSigs::updateW_GR()
setwd('/Users/ereznik/Documents/randomprojects/vascularmimicry/import/')
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
cl = readWorksheetFromFile(cellfile,sheet = 'Imputed Data')
head(sn)
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
head(snmet)
head(clmet)
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
save(snmet,clmet,snd,cld,file = '../data/imported_VascularMet.RData')
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(snmet)
pc_clmet = prcomp(clmet)
class(snmet)
snmet
snmet[,1]
snmet[,2]
snmet[,20]
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
pc_clmet = prcomp(clmet)
pc_clmet
?prcomp
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
sdcols = apply(clmet,2,sd)
hist(sdcols)
which(sdcols == 0)
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
clmet[,1]
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
cl[,:10]
cl[,1:10]
sn[,1:10]
source('~/Documents/randomprojects/vascularmimicry/import/import_vascularmet.R', echo=TRUE)
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
head(pc_clmet)
pc_clmet = prcomp(t(clmet),center = TRUE,scale = TRUE)
head(pc_clmet)
head(pc_clmet)
pc_clmet = prcomp(clmet,center = TRUE,scale = TRUE)
head(pc_clmet)
head(cld)
pc_clmet_res$CellLine = cld[rownames(pc_clmet_res),'Cell.Number..Mio.']
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
ggplot(pc_clmet_res,aes(PC1,PC2,fill = CellLine)) + geom_point()
head(cld)
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
ggplot(pc_clmet_res,aes(PC1,PC2,color = CellLine)) + geom_point()
head(cld)
cld
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
ggplot(pc_clmet_res,aes(PC1,PC2,color = CellLine,shape = Cultivation)) + geom_point(size = 5)
ggplot(pc_clmet_res,aes(PC1,PC2,color = CellLine,shape = Cultivation)) + geom_point(size = 4)
ggplot(pc_clmet_res,aes(PC1,PC2,color = CellLine,shape = Cultivation)) + geom_point(size = 4) +
facet_wrap(~Cultivation)
cld
ggplot(pc_clmet_res,aes(PC1,PC2,color = CellLine,shape = Cultivation)) + geom_point(size = 4,alpha = 0.4) +
facet_wrap(~Cultivation)
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
pc_snmet_res$CellLine = snd[rownames(pc_snmet_res),'Cell.Line']
ggplot(pc_snmet_res,aes(PC1,PC2,color = CellLine,shape = Cultivation)) + geom_point(size = 4,alpha = 0.4) +
facet_wrap(~Cultivation)
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
pc_snmet_res
pc_snmet = prcomp(t(snmet),center = TRUE,scale = TRUE)
pc_snmet_res = as.data.frame( pc_snmet$rotation )
pc_snmet_res$CellLine = snd[rownames(pc_snmet_res),'Cell.Line']
pc_snmet_res$Cultivation = snd[rownames(pc_snmet_res),'Cultivation']
pc_snmet_res
pc_snmet = prcomp(t(snmet),center = TRUE,scale = TRUE)
pc_snmet_res = as.data.frame( pc_snmet$rotation )
pc_snmet_res
snd[rownames(pc_snmet_res),'Cell.Line']
snd
source('~/Documents/randomprojects/vascularmimicry/analysis/vascular_PCA.R', echo=TRUE)
ggplot(pc_snmet_res,aes(PC1,PC2,color = CellLine,shape = Cultivation)) + geom_point(size = 4,alpha = 0.4) +
facet_wrap(~Cultivation)
dev.off()
ggplot(pc_snmet_res,aes(PC1,PC2,color = CellLine,shape = Cultivation)) + geom_point(size = 4,alpha = 0.4) +
facet_wrap(~Cultivation)
